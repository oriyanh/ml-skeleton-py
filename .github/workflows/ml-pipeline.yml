# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: 'machine learning pipeline'
on:
  push:
    branches:
      - '**'
    tags-ignore:
      - v*
  pull_request:
    types: [closed]
    branches:
      - master

jobs:
  debug:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "$GITHUB_CONTEXT"

  # will run tests on every commit, except when merging a pull request
  tests:
    if: github.event.pull_request.merged == false
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7, 3.8]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -e ".[test]"
      - name: Lint with flake8 & black
        run: |
          make lint
      - name: Unit tests
        run: |
          make test
      - name: Regression e2e tests
        run: |
          make clean generate-dataset train
      - name: Coverage report
        run: |
          make coverage
      - name: Upload coverage
        uses: codecov/codecov-action@v1

  # will train and save artifacts on every commit, except when merging a pull request
  train:
    if: github.event.pull_request.merged == false
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -e .
      - name: Train the model
        run: |
          make train
      - name: Archive training artifacts
        uses: actions/upload-artifact@v2
        with:
          name: models
          path: models

  # will only run after merging a pull request
  # download the artifacts from the pull request workflow
  # and save them in the current workflow
  transfer-artifacts:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts from pull request
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: ml-pipeline.yml
          pr: ${{github.event.pull_request.number}}
          name: models
          path: models
      - name: Save artifacts for current workflow
        uses: actions/upload-artifact@v2
        with:
          name: models
          path: models

  # will run on master, after train/transfer-artifacts are done
  # create a new github release
  create-release:
    if: always() && github.ref == 'refs/heads/master'
    name: 'create Release'
    runs-on: ubuntu-latest
    needs: [train, transfer-artifacts]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@master
      - name: Unshallow
        run: git fetch --prune --unshallow --tags
      - name: Find Tag
        id: get_latest_tag
        uses: jimschubert/query-tag-action@v1
        with:
          include: 'v*'
          exclude: '*-rc*'
          commit-ish: 'HEAD~'
          skip-unshallow: 'true'
      - run: echo "::set-output name=version::$(echo ${{ steps.get_latest_tag.outputs.tag }} | cut -d- -f2)"
        id: get_version
      - name: 'Get next version'
        id: next_tag
        uses: "WyriHaximus/github-action-next-semvers@master"
        with:
          version: ${{ steps.get_version.outputs.version }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "${{ steps.next_tag.outputs.v_patch }}"
          release_name: "${{ steps.next_tag.outputs.v_patch }}"
          body: |
            Automatic release for ${{ steps.next_tag.outputs.v_patch }}
          draft: false
          prerelease: false

